// Code generated by MockGen. DO NOT EDIT.
// Source: ./gorm_transactor.go
//
// Generated by this command:
//
//	mockgen -source=./gorm_transactor.go -destination=./gorm_transactor_mock.go -package=crud
//

// Package crud is a generated GoMock package.
package crud

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTransactor is a mock of Transactor interface.
type MockTransactor struct {
	ctrl     *gomock.Controller
	recorder *MockTransactorMockRecorder
	isgomock struct{}
}

// MockTransactorMockRecorder is the mock recorder for MockTransactor.
type MockTransactorMockRecorder struct {
	mock *MockTransactor
}

// NewMockTransactor creates a new mock instance.
func NewMockTransactor(ctrl *gomock.Controller) *MockTransactor {
	mock := &MockTransactor{ctrl: ctrl}
	mock.recorder = &MockTransactorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactor) EXPECT() *MockTransactorMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockTransactor) Begin(ctx context.Context) (context.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin", ctx)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockTransactorMockRecorder) Begin(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockTransactor)(nil).Begin), ctx)
}

// Commit mocks base method.
func (m *MockTransactor) Commit(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTransactorMockRecorder) Commit(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTransactor)(nil).Commit), ctx)
}

// Rollback mocks base method.
func (m *MockTransactor) Rollback(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Rollback", ctx)
}

// Rollback indicates an expected call of Rollback.
func (mr *MockTransactorMockRecorder) Rollback(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTransactor)(nil).Rollback), ctx)
}

// WithinTransaction mocks base method.
func (m *MockTransactor) WithinTransaction(ctx context.Context, serviceFn func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithinTransaction", ctx, serviceFn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithinTransaction indicates an expected call of WithinTransaction.
func (mr *MockTransactorMockRecorder) WithinTransaction(ctx, serviceFn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithinTransaction", reflect.TypeOf((*MockTransactor)(nil).WithinTransaction), ctx, serviceFn)
}
