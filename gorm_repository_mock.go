// Code generated by MockGen. DO NOT EDIT.
// Source: ./gorm_repository.go
//
// Generated by this command:
//
//	mockgen -source=./gorm_repository.go -destination=./gorm_repository_mock.go -package=crud
//

// Package crud is a generated GoMock package.
package crud

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockRepository is a mock of Repository interface.
type MockRepository[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder[T]
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder[T any] struct {
	mock *MockRepository[T]
}

// NewMockRepository creates a new mock instance.
func NewMockRepository[T any](ctrl *gomock.Controller) *MockRepository[T] {
	mock := &MockRepository[T]{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository[T]) EXPECT() *MockRepositoryMockRecorder[T] {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRepository[T]) Delete(ctx context.Context, model T) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder[T]) Delete(ctx, model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository[T])(nil).Delete), ctx, model)
}

// FindAll mocks base method.
func (m *MockRepository[T]) FindAll(ctx context.Context, spec Specification[T]) ([]T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, spec)
	ret0, _ := ret[0].([]T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockRepositoryMockRecorder[T]) FindAll(ctx, spec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockRepository[T])(nil).FindAll), ctx, spec)
}

// FindFirst mocks base method.
func (m *MockRepository[T]) FindFirst(ctx context.Context, spec Specification[T]) (T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFirst", ctx, spec)
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFirst indicates an expected call of FindFirst.
func (mr *MockRepositoryMockRecorder[T]) FindFirst(ctx, spec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFirst", reflect.TypeOf((*MockRepository[T])(nil).FindFirst), ctx, spec)
}

// GetGormInstance mocks base method.
func (m *MockRepository[T]) GetGormInstance(ctx context.Context) (*gorm.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGormInstance", ctx)
	ret0, _ := ret[0].(*gorm.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGormInstance indicates an expected call of GetGormInstance.
func (mr *MockRepositoryMockRecorder[T]) GetGormInstance(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGormInstance", reflect.TypeOf((*MockRepository[T])(nil).GetGormInstance), ctx)
}

// Insert mocks base method.
func (m *MockRepository[T]) Insert(ctx context.Context, model T) (T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, model)
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockRepositoryMockRecorder[T]) Insert(ctx, model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRepository[T])(nil).Insert), ctx, model)
}

// InsertMany mocks base method.
func (m *MockRepository[T]) InsertMany(ctx context.Context, models []T) ([]T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMany", ctx, models)
	ret0, _ := ret[0].([]T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertMany indicates an expected call of InsertMany.
func (mr *MockRepositoryMockRecorder[T]) InsertMany(ctx, models any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMany", reflect.TypeOf((*MockRepository[T])(nil).InsertMany), ctx, models)
}

// Update mocks base method.
func (m *MockRepository[T]) Update(ctx context.Context, model T) (T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, model)
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder[T]) Update(ctx, model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository[T])(nil).Update), ctx, model)
}
